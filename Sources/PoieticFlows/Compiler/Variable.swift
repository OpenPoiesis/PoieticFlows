//
//  File.swift
//  
//
//  Created by Stefan Urbanek on 19/09/2023.
//
import PoieticCore

// TODO: Consolidate all the variable/reference types, we have way too many of them


/// Object describing a simulation state variable.
///
/// This is the core detail information of the simulation. There is one
/// state variable for each object, usually a node, that represent a state
/// in the simulation. A stock, a flow or an auxiliary - they all are state
/// variables.
///
public struct ComputedVariable: IndexRepresentable, CustomStringConvertible {
    // TODO: Is not this too fat?
    // TODO: Rename to ComputedVariable, ObjectVariable, NodeVariable
    
    /// ID of the object, usually a node, that represents the variable.
    public let id: ObjectID
    
    /// Index of the variable in the simulation state vector.
    public let index: VariableIndex
    
    /// Type of the computation of the variable.
    public let computation: ComputationalRepresentation
    
    /// Name of the variable.
    public let name: String
    
    public var description: String {
        "var(\(name), id:\(id), idx:\(index))"
    }
}

public struct BoundBuiltinVariable {
    public let builtin: BuiltinVariable
    public let index: VariableIndex
}

/// Type of the simulation variable.
///
/// - SeeAlso: ``SimulationVariable``
///
public enum SimulationVariableType: String {
    /// The simulation variable represents a computation defined
    /// by a node.
    case computed
    /// The simulation variable represents a built-in variable.
    ///
    case builtin
}

/// Representation of a variable in a simulation.
///
/// This structure provides information about a variable used in the simulation.
/// Variable can be built-in or computed. The computed variable is representing
/// a node in the model, typically a node with a formula.
///
/// The structure can be used directly to fetch a variable value from a state
/// vector:
///
/// ```swift
///  // Let the following two be given
/// let state: SimulationState
/// let variable: SimulationVariable
///
/// // Fetch the value
/// let value: Variant = state[variable]
///
/// // Use the value...
/// ```
///
public enum SimulationVariable {
    // TODO: Reference where the variables are defined
    /// Represents a built-in variable â€“ a variable which value is provided
    /// by the simulation system.
    ///
    case builtin(BoundBuiltinVariable)
    
    /// A variable that corresponds to a node of the model. The variable
    /// is computed during the simulation, for example from a node
    /// with the ``/PoieticCore/Trait/Formula`` trait.
    ///
    case computed(ComputedVariable)
    
    /// Type of the simulation variable.
    ///
    public var type: SimulationVariableType {
        switch self {
        case .builtin: .builtin
        case .computed: .computed
        }
    }
    
    /// Index of the variable in the corresponding list of state vector
    /// variables.
    ///
    /// The index refers to an index either in a built-in variable list or
    /// to an index within computed variable list, depends on the
    /// variable type.
    ///
    public var index: VariableIndex {
        switch self {
        case let .builtin(builtin): builtin.index
        case let .computed(computed): computed.index
        }
    }
    
    /// Name of the variable.
    ///
    /// Convenience attribute that uses the name from the underlying variable
    /// type.
    ///
    public var name: String {
        switch self {
        case let .builtin(builtin): builtin.builtin.name
        case let .computed(computed): computed.name
        }
    }
    
    /// ID of a simulation node that the variable represents, if the variable
    /// represents a node.
    ///
    /// ID is `nil` when the variable is a built-in variable.
    ///
    public var id: ObjectID? {
        switch self {
        case .builtin(_): nil
        case .computed(let computed): computed.id
        }
    }
}

/// Structure representing a reference to a simulation variable.
///
/// The structure is analogous to an entry in a symbol table generated by the
/// compiler. It provides information about where a particular simulation
/// variable can be found in the simulation state.
///
public struct BoundVariableReference: Hashable, CustomStringConvertible, TypedValue {
    /// Reference to a variable.
    ///
    public let variable: VariableReference
    
    /// Index in the ``SimulationState`` where the variable value is contained.
    /// For variables representing simulation objects, the index is into the
    /// ``SimulationState/computedValues``, for variables representing built-ins, the
    /// index is into the ``SimulationState/builtins``.
    public let index: Int
    
    /// Type of the wrapped variable.
    ///
    public var atomType: AtomType? { variable.valueType }
    
    public var description: String {
        "(\(index),\(variable))"
    }
}

