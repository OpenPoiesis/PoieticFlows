{
  "abstract" : [
    {
      "text" : "An abstract class for equations solvers.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:12PoieticFlows6SolverC",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "class"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "Solver"
      }
    ],
    "modules" : [
      {
        "name" : "PoieticFlows"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "Solver"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Class",
    "symbolKind" : "class",
    "title" : "Solver"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "class"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "Solver"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Purpose of a solver is to initialise values of the nodes and then",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to compute and integrate each step of the simulation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Solver is using a ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/CompiledModel",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", which is guaranteed to be correct",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for computation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The main method of the solver is ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/compute(at:with:timeDelta:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", which is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "provided by concrete subclasses of the solver.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To use the solver, it needs to be initialised first, then the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/compute(at:with:timeDelta:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " is called for each step of the simulation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Assume we have a compiled model.",
            "let compiled: CompiledModel",
            "",
            "let solver = EulerSolver(compiled)",
            "",
            "var state: StateVector = solver.initialize()",
            "var time: Double = 0.0",
            "let timeDelta: Double = 1.0",
            "",
            "for step in (1...100) {",
            "    time += timeDelta",
            "    state = try solver.compute(at: time,",
            "                               with: state,",
            "                               timeDelta: timeDelta)",
            "    print(state)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "To get a solver by name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Assume this is given, provided by the user or in a configuration.",
            "let solverTypeName: String",
            "guard let solverType = Solver.registeredSolvers[solverTypeName] else {",
            "    fatalError(\"Unknown solver: \\(solverTypeName)\")",
            "}",
            "",
            "let solver = solverType.init()",
            "",
            "\/\/ ... now we can use the solver"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/EulerSolver",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/RungeKutta4Solver"
      ],
      "kind" : "relationships",
      "title" : "Inherited By",
      "type" : "inheritedBy"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/StateVector",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/EulerSolver",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/RungeKutta4Solver",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/StateVector",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/KeyedNumericVector"
      ],
      "title" : "Simulation and Solver"
    }
  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/init(_:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/compiledModel"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/compute(at:with:timeDelta:)",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/computeStock(stock:at:with:)",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/evaluate(object:with:at:timeDelta:)",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/initialize(time:override:)"
      ],
      "title" : "Instance Methods"
    },
    {
      "identifiers" : [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/registeredSolverNames",
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/registeredSolvers"
      ],
      "title" : "Type Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/registerSolver(name:solver:)"
      ],
      "title" : "Type Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/poieticflows\/solver"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://PoieticFlows/documentation/PoieticFlows": {
  "abstract" : [
    {
      "text" : "Package for simulation of the ",
      "type" : "text"
    },
    {
      "inlineContent" : [
        {
          "text" : "Stock and Flow",
          "type" : "text"
        }
      ],
      "type" : "emphasis"
    },
    {
      "text" : " model.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "PoieticFlows",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows"
},
"doc://PoieticFlows/documentation/PoieticFlows/CompiledModel": {
  "abstract" : [
    {
      "text" : "Structure used by the simulator.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "CompiledModel"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/CompiledModel",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "CompiledModel"
    }
  ],
  "role" : "symbol",
  "title" : "CompiledModel",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/compiledmodel"
},
"doc://PoieticFlows/documentation/PoieticFlows/EulerSolver": {
  "abstract" : [
    {
      "text" : "Solver that integrates using the Euler method.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "EulerSolver"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/EulerSolver",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "EulerSolver"
    }
  ],
  "role" : "symbol",
  "title" : "EulerSolver",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/eulersolver"
},
"doc://PoieticFlows/documentation/PoieticFlows/KeyedNumericVector": {
  "abstract" : [
    {
      "text" : "A simple vector-like structure to hold an unordered collection of numeric",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "values that can be accessed by key. Simple arithmetic operations can be done",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "with the structure, such as addition, subtraction and multiplication",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "by a scalar value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "KeyedNumericVector"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/KeyedNumericVector",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "KeyedNumericVector"
    }
  ],
  "role" : "symbol",
  "title" : "KeyedNumericVector",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/keyednumericvector"
},
"doc://PoieticFlows/documentation/PoieticFlows/RungeKutta4Solver": {
  "abstract" : [
    {
      "text" : "Solver that integrates using the Runge Kutta 4 method.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RungeKutta4Solver"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/RungeKutta4Solver",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RungeKutta4Solver"
    }
  ],
  "role" : "symbol",
  "title" : "RungeKutta4Solver",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/rungekutta4solver"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver": {
  "abstract" : [
    {
      "text" : "An abstract class for equations solvers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Solver"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Solver"
    }
  ],
  "role" : "symbol",
  "title" : "Solver",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/compiledModel": {
  "abstract" : [
    {
      "text" : "Compiled model that the solver is solving for.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "compiledModel"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows13CompiledModelV",
      "text" : "CompiledModel"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/compiledModel",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "compiledModel",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/compiledmodel"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/compute(at:with:timeDelta:)": {
  "abstract" : [
    {
      "text" : "Compute the next state vector.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "compute"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "at"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "with"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows11StateVectora",
      "text" : "StateVector"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "timeDelta"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows11StateVectora",
      "text" : "StateVector"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/compute(at:with:timeDelta:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "compute(at:with:timeDelta:)",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/compute(at:with:timedelta:)"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/computeStock(stock:at:with:)": {
  "abstract" : [
    {
      "text" : "Compute a difference of a stock.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "computeStock"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "stock"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11PoieticCore8ObjectIDa",
      "text" : "ObjectID"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "at"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "with"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "keyword",
      "text" : "inout"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows11StateVectora",
      "text" : "StateVector"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/computeStock(stock:at:with:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "computeStock(stock:at:with:)",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/computestock(stock:at:with:)"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/evaluate(object:with:at:timeDelta:)": {
  "abstract" : [
    {
      "text" : "Evaluate an expression within the context of a simulation state.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "evaluate"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "object"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11PoieticCore8ObjectIDa",
      "text" : "ObjectID"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "with"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows11StateVectora",
      "text" : "StateVector"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "at"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "timeDelta"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/evaluate(object:with:at:timeDelta:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "evaluate(object:with:at:timeDelta:)",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/evaluate(object:with:at:timedelta:)"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/init(_:)": {
  "abstract" : [
    {
      "text" : "Create a solver.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows13CompiledModelV",
      "text" : "CompiledModel"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/init(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/init(_:)"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/initialize(time:override:)": {
  "abstract" : [
    {
      "text" : "Initialise the computation state.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "initialize"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "time"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "override"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11PoieticCore8ObjectIDa",
      "text" : "ObjectID"
    },
    {
      "kind" : "text",
      "text" : " : "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : "]) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows11StateVectora",
      "text" : "StateVector"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/initialize(time:override:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "initialize(time:override:)",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/initialize(time:override:)"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/registerSolver(name:solver:)": {
  "abstract" : [
    {
      "text" : "Register a solver within the solver registry.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "registerSolver"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "name"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "solver"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows6SolverC",
      "text" : "Solver"
    },
    {
      "kind" : "text",
      "text" : ".Type)"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/registerSolver(name:solver:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "registerSolver(name:solver:)",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/registersolver(name:solver:)"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/registeredSolverNames": {
  "abstract" : [
    {
      "text" : "Return list of registered solver names.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "registeredSolverNames"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/registeredSolverNames",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "registeredSolverNames",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/registeredsolvernames"
},
"doc://PoieticFlows/documentation/PoieticFlows/Solver/registeredSolvers": {
  "abstract" : [
    {
      "text" : "A dictionary of registered solver types.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "registeredSolvers"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : " : "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:12PoieticFlows6SolverC",
      "text" : "Solver"
    },
    {
      "kind" : "text",
      "text" : ".Type]"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/Solver\/registeredSolvers",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "registeredSolvers",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/solver\/registeredsolvers"
},
"doc://PoieticFlows/documentation/PoieticFlows/StateVector": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "StateVector"
    }
  ],
  "identifier" : "doc:\/\/PoieticFlows\/documentation\/PoieticFlows\/StateVector",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "StateVector"
    }
  ],
  "role" : "symbol",
  "title" : "StateVector",
  "type" : "topic",
  "url" : "\/documentation\/poieticflows\/statevector"
}
}
}