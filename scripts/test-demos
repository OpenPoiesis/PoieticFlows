#!/bin/zsh
#
# Script to run all the demos.
#
# Usage:
#
# In the PoieticFlows top-level directory (very likely one level up from this
# script) run:
#
#       scripts/test-demos
#
# It will build the project and run using the debug version of the tool
#
# Variables that can be set:
#
# TEST_OUT - test output directory, default is ./test_out
# POIETIC  - path to the poietic tool. By default it will be freshly built debug
#            executable in .build/debug/poietic
# DEMOS    - path to demos top-level directory, default is ../PoieticExamples
#


set -e

TEST_OUT="${TEST_OUT:-./test_out}"
DEMOS_PATH=${DEMOS:-../PoieticExamples}

poietic () {
    if [[ -v POIETIC ]]
    then
        if ! command -v ${POIETIC} &> /dev/null
        then
            echo "Poietic command '${POIETIC}' not found. Set POIETIC environment variable with a valid executable path." 1>&2
            exit 1
        fi
        $POIETIC $*
    else
        swift run poietic $*
    fi
}

set_up() {
    rm -r ${TEST_OUT} 2> /dev/null && echo "Cleaned-up testing directory."
    echo Creating testing directory at ${TEST_OUT}
    mkdir -p ${TEST_OUT}
    
    if [[ -v POIETIC ]]
    then
        echo Using tool: ${POIETIC}
    else
        swift build
        export POIETIC=.build/debug/poietic
    fi

}

set_up

echo Demos path: ${DEMOS_PATH}
all_demos=($(find $DEMOS_PATH -name '*.poieticframe' ))

for DEMO_PATH in ${all_demos[*]}; do
    DEMO=${${DEMO_PATH#$DEMOS_PATH/}%*.poieticframe}
    echo "=== Testing ${DEMO}:"
    
    TEST_DEMO_OUT=${TEST_OUT}/$DEMO
    export POIETIC_DESIGN="$TEST_DEMO_OUT/data.poietic"

    mkdir -p ${TEST_DEMO_OUT}

    echo '--- Creating db and importing frame'
    poietic new --import $DEMO_PATH --auto-parameters

    echo '--- Running'
    poietic run --steps 150 -f gnuplot -o ${TEST_DEMO_OUT}
    
    echo ""
done

